{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8802127,"sourceType":"datasetVersion","datasetId":5293408},{"sourceId":8811466,"sourceType":"datasetVersion","datasetId":5300160},{"sourceId":8824845,"sourceType":"datasetVersion","datasetId":5309304},{"sourceId":8835405,"sourceType":"datasetVersion","datasetId":5316864},{"sourceId":8839768,"sourceType":"datasetVersion","datasetId":5319919}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport json\nimport random\n\n# Configuration\nmanifest_file = '/kaggle/input/nemo-cleaned-arabic-json/train.json'\ntrain_ratio = 0.8  # 80% for training\ndev_ratio = 0.1    # 10% for development\ntest_ratio = 0.1   # 10% for testing\n\n# Load existing manifest data\nmanifest_data = []\nif os.path.isfile(manifest_file):\n    with open(manifest_file, 'r') as json_file:\n        for line in json_file:\n            manifest_data.append(json.loads(line))\n\n# Shuffle the data\nrandom.shuffle(manifest_data)\n\n# Calculate split indices\ntotal_samples = len(manifest_data)\ntrain_end = int(total_samples * train_ratio)\ndev_end = train_end + int(total_samples * dev_ratio)\n\n# Split the data\ntrain_data = manifest_data[:train_end]\ndev_data = manifest_data[train_end:dev_end]\ntest_data = manifest_data[dev_end:]\n\n# Define a function to write a subset to a JSON file\ndef write_subset(filename, data):\n    with open(filename, 'w') as json_file:\n        for entry in data:\n            entry['audio_filepath'] = entry['audio_filepath']\n            json.dump(entry, json_file)\n            json_file.write('\\n')\n\n# Write the subsets to their respective files\nwrite_subset('train_manifest.json', train_data)\nwrite_subset('dev_manifest.json', dev_data)\nwrite_subset('test_manifest.json', test_data)\n\nprint(f\"Data split into train ({len(train_data)} samples), dev ({len(dev_data)} samples), and test ({len(test_data)} samples) sets.\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-01T20:06:02.421158Z","iopub.execute_input":"2024-07-01T20:06:02.422198Z","iopub.status.idle":"2024-07-01T20:06:04.111357Z","shell.execute_reply.started":"2024-07-01T20:06:02.422160Z","shell.execute_reply":"2024-07-01T20:06:04.110303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install nemo_toolkit['asr']","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:06:04.113399Z","iopub.execute_input":"2024-07-01T20:06:04.113727Z","iopub.status.idle":"2024-07-01T20:06:24.196426Z","shell.execute_reply.started":"2024-07-01T20:06:04.113698Z","shell.execute_reply":"2024-07-01T20:06:24.195142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!git clone https://github.com/NVIDIA/NeMo.git","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:06:24.198042Z","iopub.execute_input":"2024-07-01T20:06:24.198406Z","iopub.status.idle":"2024-07-01T20:06:39.925543Z","shell.execute_reply.started":"2024-07-01T20:06:24.198365Z","shell.execute_reply":"2024-07-01T20:06:39.924125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create the .yaml configuration for Fast Conformer Transducer with Egyptian Dialect\nconfig_data = \"\"\"\nname: &name \"ConvRNNT5x1_Arabic\"\n\nmodel:\n  sample_rate: 16000\n  compute_eval_loss: true\n\n  labels: [ \" \", \"ا\", \"ب\", \"ت\", \"ث\", \"ج\", \"ح\", \"خ\", \"د\", \"ذ\", \"ر\", \"ز\", \"س\", \"ش\", \"ص\", \"ض\", \"ط\", \"ظ\", \"ع\", \"غ\", \"ف\", \"ق\", \"ك\", \"ل\", \"م\", \"ن\", \"ه\", \"و\", \"ي\", \"ء\", \"أ\", \"إ\", \"آ\", \"ى\" ]\n\n  train_ds:\n    manifest_filepath: \"/kaggle/working/train_manifest.json\"\n    sample_rate: ${model.sample_rate}\n    batch_size: 16\n    trim_silence: true\n    max_duration: 16.0\n    labels: ${model.labels}\n    shuffle: true\n    num_workers: 4\n    pin_memory: true\n    # tarred datasets\n    is_tarred: false\n    tarred_audio_filepaths: null\n    tarred_shard_strategy: \"scatter\"\n    shuffle_n: 2048\n    # bucketing params\n    bucketing_strategy: \"synced_randomized\"\n    bucketing_batch_size: null\n\n  validation_ds:\n    manifest_filepath: '/kaggle/working/dev_manifest.json'\n    sample_rate: ${model.sample_rate}\n    batch_size: 16\n    shuffle: false\n    labels: ${model.labels}\n    num_workers: 4\n    pin_memory: true\n\n  test_ds:\n    manifest_filepath: '/kaggle/working/test_manifest.json'\n    sample_rate: ${model.sample_rate}\n    batch_size: 16\n    shuffle: false\n    labels: ${model.labels}\n    num_workers: 4\n    pin_memory: true\n\n  model_defaults:\n    repeat: 5\n    dropout: 0.0\n    separable: true\n    se: true\n    se_context_size: -1\n    # encoder / decoder / joint values\n    enc_hidden: 1024\n    pred_hidden: 320\n    joint_hidden: 320\n\n  preprocessor:\n    _target_: nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor\n    normalize: \"per_feature\"\n    window_size: 0.02\n    sample_rate: ${model.sample_rate}\n    window_stride: 0.01\n    window: \"hann\"\n    features: &n_mels 80\n    n_fft: 512\n    frame_splicing: 1\n    dither: 0.00001\n\n  spec_augment:\n    _target_: nemo.collections.asr.modules.SpectrogramAugmentation\n    rect_freq: 50\n    rect_masks: 5\n    rect_time: 120\n\n  encoder:\n    _target_: nemo.collections.asr.modules.ConvASREncoder\n    feat_in: *n_mels\n    activation: relu\n    conv_mask: true\n\n    jasper:\n      - filters: 128\n        repeat: 1\n        kernel: [11]\n        stride: [1]\n        dilation: [1]\n        dropout: ${model.model_defaults.dropout}\n        residual: true\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n\n      - filters: 256\n        repeat: ${model.model_defaults.repeat}\n        kernel: [13]\n        stride: [2]\n        dilation: [1]\n        dropout: ${model.model_defaults.dropout}\n        residual: true\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n        stride_last: true\n        residual_mode: \"stride_add\"\n\n      - filters: 256\n        repeat: ${model.model_defaults.repeat}\n        kernel: [15]\n        stride: [1]\n        dilation: [1]\n        dropout: ${model.model_defaults.dropout}\n        residual: true\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n\n      - filters: 256\n        repeat: ${model.model_defaults.repeat}\n        kernel: [17]\n        stride: [2]\n        dilation: [1]\n        dropout: ${model.model_defaults.dropout}\n        residual: true\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n        stride_last: true\n        residual_mode: \"stride_add\"\n\n      - filters: 256\n        repeat: ${model.model_defaults.repeat}\n        kernel: [19]\n        stride: [1]\n        dilation: [1]\n        dropout: ${model.model_defaults.dropout}\n        residual: true\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n\n      - filters: 256\n        repeat: 1\n        kernel: [21]\n        stride: [2]\n        dilation: [1]\n        dropout: 0.0\n        residual: false\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n        stride_last: true\n        residual_mode: \"stride_add\"\n\n      - filters: ${model.model_defaults.enc_hidden}\n        repeat: 1\n        kernel: [1]\n        stride: [1]\n        dilation: [1]\n        dropout: 0.0\n        residual: false\n        separable: ${model.model_defaults.separable}\n        se: ${model.model_defaults.se}\n        se_context_size: ${model.model_defaults.se_context_size}\n\n  decoder:\n    _target_: nemo.collections.asr.modules.RNNTDecoder\n    normalization_mode: null\n    random_state_sampling: false\n    blank_as_pad: true\n\n    prednet:\n      pred_hidden: ${model.model_defaults.pred_hidden}\n      pred_rnn_layers: 1\n      t_max: null\n      dropout: 0.0\n\n  joint:\n    _target_: nemo.collections.asr.modules.RNNTJoint\n    log_softmax: null  # sets it according to cpu/gpu device\n\n    # fused mode\n    fuse_loss_wer: false\n    fused_batch_size: 1\n\n    jointnet:\n      joint_hidden: ${model.model_defaults.joint_hidden}\n      activation: \"relu\"\n      dropout: 0.0\n\n  decoding:\n    strategy: \"greedy_batch\"\n\n    # greedy strategy config\n    greedy:\n      max_symbols: 30\n\n    # beam strategy config\n    beam:\n      beam_size: 2\n      score_norm: true\n      softmax_temperature: 1.0  # scale the logits by some temperature prior to softmax\n      tsd_max_sym_exp: 10  # for Time Synchronous Decoding, int > 0\n      alsd_max_target_len: 5.0  # for Alignment-Length Synchronous Decoding, float > 1.0\n      maes_num_steps: 2  # for modified Adaptive Expansion Search, int > 0\n      maes_prefix_alpha: 1  # for modified Adaptive Expansion Search, int > 0\n      maes_expansion_beta: 2  # for modified Adaptive Expansion Search, int >= 0\n      maes_expansion_gamma: 2.3  # for modified Adaptive Expansion Search, float >= 0\n\n  loss:\n    loss_name: \"default\"\n    warprnnt_numba_kwargs:\n      fastemit_lambda: 0.0  # Recommended values to be in range [1e-4, 1e-2], 0.001 is a good start.\n      clamp: -1.0  # if > 0, applies gradient clamping in range [-clamp, clamp] for the joint tensor only.\n\n  optim:\n    name: adam\n    # _target_: nemo.core.optim.optimizers.Adam\n    lr: .1\n\n    # optimizer arguments\n    betas: [0.9, 0.999]\n    weight_decay: 0.0001\n\n    # scheduler setup\n    sched:\n      name: CosineAnnealing\n\n      # scheduler config override\n      warmup_steps: null\n      warmup_ratio: 0.05\n      min_lr: 1e-6\n      last_epoch: -1\n\ntrainer:\n  devices: -1 \n  max_epochs: 40\n  max_steps: -1 # computed at runtime if not set\n  num_nodes: 1\n  accelerator: gpu\n  strategy: ddp\n  precision: 32\n  accumulate_grad_batches: 1\n  enable_checkpointing: False  # Provided by exp_manager\n  logger: False  # Provided by exp_manager\n  log_every_n_steps: 1  # Interval of logging.\n  val_check_interval: 1.0 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations\n  benchmark: false # needs to be false for models with variable-length speech input as it slows down training\n\nexp_manager:\n  exp_dir: 'experiments/'\n  name: *name\n  create_tensorboard_logger: True\n  create_checkpoint_callback: True\n  checkpoint_callback_params:\n    monitor: \"val_wer\"\n    mode: \"min\"\n  #resume_from_checkpoint: '/kaggle/input/transducer-char-v1/transducer-char-v1.nemo' # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.\n  #resume_if_exists: True\n  #resume_ignore_no_checkpoint: True\n  create_wandb_logger: False\n  wandb_logger_kwargs:\n    name: null\n    project: null\n\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:47:51.226571Z","iopub.execute_input":"2024-07-01T20:47:51.227033Z","iopub.status.idle":"2024-07-01T20:47:51.241575Z","shell.execute_reply.started":"2024-07-01T20:47:51.226995Z","shell.execute_reply":"2024-07-01T20:47:51.240592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\n# Ensure the directory exists before writing the file\ndirectory = \"/kaggle/working/NeMo/conf\"\nif not os.path.exists(directory):\n    os.makedirs(directory)\n\n# Write the config to a .yaml file in the specified directory\nwith open(os.path.join(directory, \"transducer_char_egyptian_dialect.yaml\"), \"w\") as file:\n    file.write(config_data)\n\nprint(f\"Configuration saved to {os.path.abspath(os.path.join(directory, 'transducer_char_egyptian_dialect.yaml'))}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:47:51.472453Z","iopub.execute_input":"2024-07-01T20:47:51.473103Z","iopub.status.idle":"2024-07-01T20:47:51.480244Z","shell.execute_reply.started":"2024-07-01T20:47:51.473067Z","shell.execute_reply":"2024-07-01T20:47:51.479372Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\n\n# Define the directory name\ndirectory = \"train_experiments\"\n\n# Create the directory\nif not os.path.exists(directory):\n    os.makedirs(directory)\n    print(f\"Directory '{directory}' created successfully.\")\nelse:\n    print(f\"Directory '{directory}' already exists.\")","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:47:51.857071Z","iopub.execute_input":"2024-07-01T20:47:51.857472Z","iopub.status.idle":"2024-07-01T20:47:51.864035Z","shell.execute_reply.started":"2024-07-01T20:47:51.857441Z","shell.execute_reply":"2024-07-01T20:47:51.863108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Read the contents of the new file\nfile_path = \"/kaggle/working/transducer_char_model.py\"\n\n# Append the new training code to the existing content\ncode = \"\"\"\nimport pytorch_lightning as pl\nfrom omegaconf import OmegaConf\n\nfrom nemo.collections.asr.models import EncDecRNNTModel\nfrom nemo.core.config import hydra_runner\nfrom nemo.utils import logging\nfrom nemo.utils.exp_manager import exp_manager\n\n# Function to setup train and validation data\ndef setup_data_loaders(model, cfg):\n    model.setup_training_data(train_data_config=cfg.model.train_ds)\n    model.setup_validation_data(val_data_config=cfg.model.validation_ds)\n    model.setup_test_data(test_data_config=cfg.model.test_ds)\n    \n    \n@hydra_runner(config_path=\"experimental/contextnet_rnnt\", config_name=\"config_rnnt\")\ndef main(cfg):\n    logging.info(f'Hydra config: {OmegaConf.to_yaml(cfg)}')\n    \n    checkpoint_path = '/kaggle/input/transducer-char-v1/transducer-char-v1.nemo'\n    transducer_char_v1_model = EncDecRNNTModel.restore_from(restore_path=checkpoint_path)\n    transducer_char_v1_model.cfg = cfg.model\n    \n    trainer = pl.Trainer(**cfg.trainer)\n    exp_manager(trainer, cfg.get(\"exp_manager\", None))\n    #transducer_char_v1_model = EncDecRNNTModel(cfg=cfg.model, trainer=trainer)\n\n    \n    # Initialize the weights of the model from another model, if provided via config\n    #transducer_char_v1_model.maybe_init_from_pretrained_checkpoint(cfg)\n    \n    setup_data_loaders(transducer_char_v1_model, cfg)\n        \n    trainer.fit(transducer_char_v1_model)\n    transducer_char_v1_model.save_to(\"/kaggle/working/train_experiments/transducer-char-v2.nemo\")\n    if hasattr(cfg.model, 'test_ds') and cfg.model.test_ds.manifest_filepath is not None:\n        if transducer_char_v1_model.prepare_test(trainer):\n            trainer.test(transducer_char_v1_model)\n\n\nif __name__ == '__main__':\n    main()  # noqa pylint: disable=no-value-for-parameter\n\"\"\"\n\n# Write the modified content back to the file\nwith open(file_path, \"w\") as file:\n    file.write(code)\n\nprint(\"File created successfully!\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:50:33.494018Z","iopub.execute_input":"2024-07-01T20:50:33.494432Z","iopub.status.idle":"2024-07-01T20:50:33.503162Z","shell.execute_reply.started":"2024-07-01T20:50:33.494401Z","shell.execute_reply":"2024-07-01T20:50:33.502308Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!python /kaggle/working/transducer_char_model.py --config-path='/kaggle/working/NeMo/conf' --config-name='transducer_char_egyptian_dialect'","metadata":{"execution":{"iopub.status.busy":"2024-07-01T20:50:33.755603Z","iopub.execute_input":"2024-07-01T20:50:33.756492Z","iopub.status.idle":"2024-07-01T20:51:23.831037Z","shell.execute_reply.started":"2024-07-01T20:50:33.756458Z","shell.execute_reply":"2024-07-01T20:51:23.829831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}